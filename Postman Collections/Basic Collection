#%RAML 0.8
title: Basic Collection
version: 1.0
documentation:
- title: Basic Collection
  content: This collection contains requests that will be used to test validity of plugin created to convert postman request into code snippet of particular language.
baseUri: https://postman-echo.com
protocols:
- HTTPS
- HTTP
baseUriParameters: {}
schemas:
- RequestHeaders(WithspecialCharacters)Example1: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "RequestHeaders(WithspecialCharacters)Example1",
      "title": "RequestHeaders(WithspecialCharacters)Example1",
      "example": {
        "data": "try eaxmaple"
      },
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "required": [
        "data"
      ]
    }
- POSTjsonwithrawRequest: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "POSTjsonwithrawRequest",
      "title": "POSTjsonwithrawRequest",
      "example": {
        "json": "Test-Test"
      },
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        }
      },
      "required": [
        "json"
      ]
    }
- POSTjsonwithrawCopyRequest: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "POSTjsonwithrawCopyRequest",
      "title": "POSTjsonwithrawCopyRequest",
      "example": {
        "json": "Test-Test"
      },
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        }
      },
      "required": [
        "json"
      ]
    }
- TestBackUpRequest: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "TestBackUpRequest",
      "title": "TestBackUpRequest",
      "example": {
        "args": {
          "test": "123",
          "anotherone": "232"
        },
        "headers": {
          "x-forwarded-proto": "https",
          "x-forwarded-port": "443",
          "host": "postman-echo.com",
          "x-amzn-trace-id": "Root=1-5f474d21-6de84f881387d360ff213f28",
          "user-agent": "PostmanRuntime/7.26.4",
          "accept": "*/*",
          "cache-control": "no-cache",
          "postman-token": "d5f39a18-b2d8-4753-a831-47005120261f",
          "accept-encoding": "gzip, deflate, br",
          "cookie": "MyTestCookie=testCookie1; sails.sid=s%3AeXlh3nHhFwaifWFA-i3k0RfZPT5wFLJl.mw95Gqec6LBD8gKT3nx0iJoYW5RvTc4tFgA%2BX87fZRs"
        },
        "url": "https://postman-echo.com/get?test=123&anotherone=232"
      },
      "type": "object",
      "properties": {
        "args": {
          "id": "Args",
          "title": "Args",
          "example": {
            "test": "123",
            "anotherone": "232"
          },
          "type": "object",
          "properties": {
            "test": {
              "type": "string"
            },
            "anotherone": {
              "type": "string"
            }
          },
          "required": [
            "test",
            "anotherone"
          ]
        },
        "headers": {
          "id": "Headers",
          "title": "Headers",
          "example": {
            "x-forwarded-proto": "https",
            "x-forwarded-port": "443",
            "host": "postman-echo.com",
            "x-amzn-trace-id": "Root=1-5f474d21-6de84f881387d360ff213f28",
            "user-agent": "PostmanRuntime/7.26.4",
            "accept": "*/*",
            "cache-control": "no-cache",
            "postman-token": "d5f39a18-b2d8-4753-a831-47005120261f",
            "accept-encoding": "gzip, deflate, br",
            "cookie": "MyTestCookie=testCookie1; sails.sid=s%3AeXlh3nHhFwaifWFA-i3k0RfZPT5wFLJl.mw95Gqec6LBD8gKT3nx0iJoYW5RvTc4tFgA%2BX87fZRs"
          },
          "type": "object",
          "properties": {
            "x-forwarded-proto": {
              "type": "string"
            },
            "x-forwarded-port": {
              "type": "string"
            },
            "host": {
              "type": "string"
            },
            "x-amzn-trace-id": {
              "type": "string"
            },
            "user-agent": {
              "type": "string"
            },
            "accept": {
              "type": "string"
            },
            "cache-control": {
              "type": "string"
            },
            "postman-token": {
              "type": "string"
            },
            "accept-encoding": {
              "type": "string"
            },
            "cookie": {
              "type": "string"
            }
          },
          "required": [
            "x-forwarded-proto",
            "x-forwarded-port",
            "host",
            "x-amzn-trace-id",
            "user-agent",
            "accept",
            "cache-control",
            "postman-token",
            "accept-encoding",
            "cookie"
          ]
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "args",
        "headers",
        "url"
      ]
    }
- Args: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Args",
      "title": "Args",
      "example": {
        "test": "123",
        "anotherone": "232"
      },
      "type": "object",
      "properties": {
        "test": {
          "type": "string"
        },
        "anotherone": {
          "type": "string"
        }
      },
      "required": [
        "test",
        "anotherone"
      ]
    }
- Headers: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Headers",
      "title": "Headers",
      "example": {
        "x-forwarded-proto": "https",
        "x-forwarded-port": "443",
        "host": "postman-echo.com",
        "x-amzn-trace-id": "Root=1-5f474d21-6de84f881387d360ff213f28",
        "user-agent": "PostmanRuntime/7.26.4",
        "accept": "*/*",
        "cache-control": "no-cache",
        "postman-token": "d5f39a18-b2d8-4753-a831-47005120261f",
        "accept-encoding": "gzip, deflate, br",
        "cookie": "MyTestCookie=testCookie1; sails.sid=s%3AeXlh3nHhFwaifWFA-i3k0RfZPT5wFLJl.mw95Gqec6LBD8gKT3nx0iJoYW5RvTc4tFgA%2BX87fZRs"
      },
      "type": "object",
      "properties": {
        "x-forwarded-proto": {
          "type": "string"
        },
        "x-forwarded-port": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "x-amzn-trace-id": {
          "type": "string"
        },
        "user-agent": {
          "type": "string"
        },
        "accept": {
          "type": "string"
        },
        "cache-control": {
          "type": "string"
        },
        "postman-token": {
          "type": "string"
        },
        "accept-encoding": {
          "type": "string"
        },
        "cookie": {
          "type": "string"
        }
      },
      "required": [
        "x-forwarded-proto",
        "x-forwarded-port",
        "host",
        "x-amzn-trace-id",
        "user-agent",
        "accept",
        "cache-control",
        "postman-token",
        "accept-encoding",
        "cookie"
      ]
    }
/headers:
  get:
    description: |
      A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.

      In Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.
    responses:
      200:
        description: Success
    headers:
      my-sample-header:
        type: string
        example: Lorem ipsum dolor sit amet
        required: true
        displayName: my-sample-header
      not-disabled-header:
        type: string
        example: ENABLED
        required: true
        displayName: not-disabled-header
/get:
  get:
    description: Testing of the new request is backed up or not
    responses:
      200:
        description: Success
        body:
          application/json; charset=utf-8:
            schema: |
              {

                "id": "TestBackUpRequest",

                "title": "TestBackUpRequest",

                "example": {

                  "args": {

                    "test": "123",

                    "anotherone": "232"

                  },

                  "headers": {

                    "x-forwarded-proto": "https",

                    "x-forwarded-port": "443",

                    "host": "postman-echo.com",

                    "x-amzn-trace-id": "Root=1-5f474d21-6de84f881387d360ff213f28",

                    "user-agent": "PostmanRuntime/7.26.4",

                    "accept": "*/*",

                    "cache-control": "no-cache",

                    "postman-token": "d5f39a18-b2d8-4753-a831-47005120261f",

                    "accept-encoding": "gzip, deflate, br",

                    "cookie": "MyTestCookie=testCookie1; sails.sid=s%3AeXlh3nHhFwaifWFA-i3k0RfZPT5wFLJl.mw95Gqec6LBD8gKT3nx0iJoYW5RvTc4tFgA%2BX87fZRs"

                  },

                  "url": "https://postman-echo.com/get?test=123&anotherone=232"

                },

                "type": "object",

                "properties": {

                  "args": {

                    "id": "Args",

                    "title": "Args",

                    "example": {

                      "test": "123",

                      "anotherone": "232"

                    },

                    "type": "object",

                    "properties": {

                      "test": {

                        "type": "string"

                      },

                      "anotherone": {

                        "type": "string"

                      }

                    },

                    "required": [

                      "test",

                      "anotherone"

                    ]

                  },

                  "headers": {

                    "id": "Headers",

                    "title": "Headers",

                    "example": {

                      "x-forwarded-proto": "https",

                      "x-forwarded-port": "443",

                      "host": "postman-echo.com",

                      "x-amzn-trace-id": "Root=1-5f474d21-6de84f881387d360ff213f28",

                      "user-agent": "PostmanRuntime/7.26.4",

                      "accept": "*/*",

                      "cache-control": "no-cache",

                      "postman-token": "d5f39a18-b2d8-4753-a831-47005120261f",

                      "accept-encoding": "gzip, deflate, br",

                      "cookie": "MyTestCookie=testCookie1; sails.sid=s%3AeXlh3nHhFwaifWFA-i3k0RfZPT5wFLJl.mw95Gqec6LBD8gKT3nx0iJoYW5RvTc4tFgA%2BX87fZRs"

                    },

                    "type": "object",

                    "properties": {

                      "x-forwarded-proto": {

                        "type": "string"

                      },

                      "x-forwarded-port": {

                        "type": "string"

                      },

                      "host": {

                        "type": "string"

                      },

                      "x-amzn-trace-id": {

                        "type": "string"

                      },

                      "user-agent": {

                        "type": "string"

                      },

                      "accept": {

                        "type": "string"

                      },

                      "cache-control": {

                        "type": "string"

                      },

                      "postman-token": {

                        "type": "string"

                      },

                      "accept-encoding": {

                        "type": "string"

                      },

                      "cookie": {

                        "type": "string"

                      }

                    },

                    "required": [

                      "x-forwarded-proto",

                      "x-forwarded-port",

                      "host",

                      "x-amzn-trace-id",

                      "user-agent",

                      "accept",

                      "cache-control",

                      "postman-token",

                      "accept-encoding",

                      "cookie"

                    ]

                  },

                  "url": {

                    "type": "string"

                  }

                },

                "required": [

                  "args",

                  "headers",

                  "url"

                ]

              }
            example: |
              {

                "args": {

                  "test": "123",

                  "anotherone": "232"

                },

                "headers": {

                  "x-forwarded-proto": "https",

                  "x-forwarded-port": "443",

                  "host": "postman-echo.com",

                  "x-amzn-trace-id": "Root=1-5f474d21-6de84f881387d360ff213f28",

                  "user-agent": "PostmanRuntime/7.26.4",

                  "accept": "*/*",

                  "cache-control": "no-cache",

                  "postman-token": "d5f39a18-b2d8-4753-a831-47005120261f",

                  "accept-encoding": "gzip, deflate, br",

                  "cookie": "MyTestCookie=testCookie1; sails.sid=s%3AeXlh3nHhFwaifWFA-i3k0RfZPT5wFLJl.mw95Gqec6LBD8gKT3nx0iJoYW5RvTc4tFgA%2BX87fZRs"

                },

                "url": "https://postman-echo.com/get?test=123&anotherone=232"

              }
        headers:
          Date:
            default: Thu, 27 Aug 2020 06:05:21 GMT
            required: false
          Content-Length:
            default: 557
            required: false
          Connection:
            default: keep-alive
            required: false
          ETag:
            default: W/"22d-RyVPLkBuI3kwOnd7ovucwnWAE90"
            required: false
          Vary:
            default: Accept-Encoding
            required: false
          set-cookie:
            default: sails.sid=s%3AtQ8xUUYshCImX7MXamJ5auIsumIgO78U.yrNWPp2YKhQ3qwOn1H%2F6TVCD0BPRbnWlvB0RGsp19gY; Path=/; HttpOnly
            required: false
    queryParameters:
      test:
        type: integer
        example: 123
        required: true
        displayName: test
      anotherone:
        type: integer
        example: 232
        required: true
        displayName: anotherone
/post:
  post:
    body:
      application/x-www-form-urlencoded:
        formParameters:
          1:
            type: string
            example: "'a'"
            required: true
            displayName: 1
          2:
            type: string
            example: '"b"'
            required: true
            displayName: 2
          "'3'":
            type: string
            example: c
            required: true
            displayName: "'3'"
          '"4"':
            type: string
            example: d
            required: true
            displayName: '"4"'
          Special:
            type: string
            example: '!@#$%*()^_=`&~              '
            required: true
            displayName: Special
          more:
            type: string
            example: ",./';[]}{\":?><|\\\\    "
            required: true
            displayName: more
    description: "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested."
    responses:
      200:
        description: Success
    headers:
      Content-Type:
        type: string
        example: application/x-www-form-urlencoded
        required: true
        displayName: Content-Type
/put:
  put:
    body:
      text/plain:
        schema: |
          {

            "example": "Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.",

            "type": "string"

          }
        example: |
          Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.

          Quisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.
    description: "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n"
    responses:
      200:
        description: Success
    headers:
      Content-Type:
        type: string
        example: text/plain
        required: true
        displayName: Content-Type
/patch:
  patch:
    body:
      text/plain:
        schema: |
          {

            "example": "Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.",

            "type": "string"

          }
        example: |
          Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.

          Suspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.
    description: "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
    responses:
      200:
        description: Success
    headers:
      Content-Type:
        type: string
        example: text/plain
        required: true
        displayName: Content-Type
/delete:
  delete:
    description: "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
    responses:
      200:
        description: Success
    headers:
      Content-Type:
        type: string
        example: text/plain
        required: true
        displayName: Content-Type
